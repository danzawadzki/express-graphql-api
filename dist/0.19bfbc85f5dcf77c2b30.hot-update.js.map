{"version":3,"sources":["webpack:///./src/api/graphQLRouter.js"],"names":["baseSchema","schema","makeExecutableSchema","typeDefs","partnerSegmentType","resolvers","merge","partnerSegmentResolvers","graphQLRouter","graphqlExpress","context","req","user"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAMA,4EAAN;;AAOA,IAAMC,SAAS,2EAAAC,CAAqB;AACnCC,WAAU,CACTH,UADS,EAET,iEAFS,EAGT,iEAHS,EAIT,yEAJS,EAKT,uEALS,EAMT,2EANS,EAOTI,kBAPS,CADyB;AAUnCC,YAAW,oDAAAC,CACV,EADU,EAEV,sEAFU,EAGV,sEAHU,EAIV,8EAJU,EAKV,4EALU,EAMV,gFANU,EAOVC,uBAPU;AAVwB,CAArB,CAAf;;AAqBO,IAAMC,gBAAgB,6EAAAC,CAAe;AAAA,QAAQ;AACnDR,gBADmD;AAEnDS,WAAS;AACRC,WADQ;AAERC,SAAMD,IAAIC;AAFF;AAF0C,EAAR;AAAA,CAAf,CAAtB,C","file":"0.19bfbc85f5dcf77c2b30.hot-update.js","sourcesContent":["import { makeExecutableSchema } from 'graphql-tools';\nimport { userResolvers, userType } from './resources/user';\nimport { songResolvers, songType } from './resources/song';\nimport { playlistResolvers, playlistType } from './resources/playlist';\nimport { ctSegmentResolvers, ctSegmentType } from './resources/ctSegment';\nimport { partnerResolvers, partnerType } from './resources/partner';\nimport merge from 'lodash.merge';\nimport { graphqlExpress } from 'apollo-server-express';\n\nconst baseSchema = `\n  schema {\n    query: Query\n    mutation: Mutation\n  }\n`;\n\nconst schema = makeExecutableSchema({\n\ttypeDefs: [\n\t\tbaseSchema,\n\t\tuserType,\n\t\tsongType,\n\t\tplaylistType,\n\t\tpartnerType,\n\t\tctSegmentType,\n\t\tpartnerSegmentType\n\t],\n\tresolvers: merge(\n\t\t{},\n\t\tuserResolvers,\n\t\tsongResolvers,\n\t\tplaylistResolvers,\n\t\tpartnerResolvers,\n\t\tctSegmentResolvers,\n\t\tpartnerSegmentResolvers\n\t)\n});\n\nexport const graphQLRouter = graphqlExpress(req => ({\n\tschema,\n\tcontext: {\n\t\treq,\n\t\tuser: req.user\n\t}\n}));\n\n\n\n// WEBPACK FOOTER //\n// ./src/api/graphQLRouter.js"],"sourceRoot":""}